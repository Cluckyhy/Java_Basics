package com.chy.synchronized_;

/*
线程同步机制：
1、在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，
   保证数据在任何同一时刻，最多有一个线程访问，保证数据的完整性，和运算结果的可再现性
2、也可以理解为：线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作
   直到该线程完成操作，其他线程才能对该内存地址进行操作
 */

/*
1、java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性
2、每个对象都对应一个可称为 "互斥锁" 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象
3、关键字synchronized来与对象的互斥锁联系，当某个对象用 synchronized修饰时，表明该对象在任一时刻只能有一个线程访问
4、同步的局限性：导致程序的执行效率要降低
5、同步方法(非静态的) 的锁可以是this，也可以是其他对象(要求是同一个对象)
6、同步方法(静态的) 的锁为当前类本身
7、为什么要叫锁，而不是钥匙，因为public的数据，本身就是公开给所有的线程，并不是关闭状态，所以也就没有钥匙这一说
   而，叫锁就是说，公开的数据，当你得到后，你就锁上自己使用，不让其他线程干扰
 */


/*
注意事项和细节：
1、同步方法如果没有使用static修饰：默认锁对象为this
2、如果方法使用static修饰，默认锁对象：当前类.class
3、实现的落地步骤：
    需要先分析上锁的代码
    选择同步代码块或同步方法
    要求多个线程的锁对象为同一个即可！！！一定不可以是不同的对象，否则毫无意义，没有达到同步
 */
public class Synchronized01 {
    public static void main(String[] args) {

    }
}
